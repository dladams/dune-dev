#!/bin/bash

# dune-checkout
#
# David Adams
# August 2015
#
# Check out the development packages.

# DUNE setup.
source $DUNE_INSDIR/duneinit.sh

PKGFILE=$DUNE_DEVDIR/packages.txt
if ! test -r $PKGFILE; then
  echo Package file not found: $PKGFILE
  exit 1
fi

# Create working area if needed.
HAVE_WORKDIR=`ls -d $DUNE_DEVDIR/workdir 2>/dev/null`
NEED_NEWDEV=
echo $DUNE_LINE
if [ -z "$HAVE_WORKDIR" ]; then
  echo Creating new workdir
  COM="mkdir $DUNE_DEVDIR/workdir"
  $COM
  echo "$COM" >> $DUNE_HISTORY
  NEED_NEWDEV=1
else
  echo Using existing workdir
fi

cd $DUNE_DEVDIR/workdir

NEWDEVOPTS=
LPRODDIR=localProducts_$DUNE_PRODUCT
if [ ! -r srcs ]; then
  NEED_NEWDEV=1
else
  if [ ! -r $LPRODDIR ]; then
    NEED_NEWDEV=1
    NEWDEVOPTS="-f"   # To allow use of existing srcs area
  fi
fi

echo $DUNE_LINE
echo Setting up $DUNE_PROJECT
COM="setup $DUNE_PROJECT $DUNE_PROJECTVERSION -q $DUNE_QUAL"
$COM
echo "$COM" >> $DUNE_HISTORY


if [ -n "$NEED_NEWDEV" ]; then
  echo $DUNE_LINE
  echo Creating mrb area
  COM="mrb newDev $NEWDEVOPTS"
  $COM
  echo "$COM" >> $DUNE_HISTORY
  echo MRB_BUILDIR = $MRB_BUILDDIR
fi

echo $DUNE_LINE
cd $DUNE_DEVDIR/workdir
echo Setting up local product
COM="source $LPRODDIR/setup"
$COM
echo "$COM" >> $DUNE_HISTORY

if ! cd srcs; then
  echo Unable to find workdir/srcs
  echo PWD is `pwd`
  exit 1
fi

# Loop over local packages and check out if not already present.
echo $DUNE_LINE
echo Checking out packages
PKGTAGS=`cat $PKGFILE | sed 's/#.*//g'`
for PKGTAG in $PKGTAGS; do
  echo $DUNE_LINE
  # PKGTAG = PKG or PKG%TAG
  PKG=`echo $PKGTAG | awk -F% '{print $1}'`
  TAG=`echo $PKGTAG | awk -F% '{print $2}'`
  EXTRA=`echo $PKGTAG | awk -F% '{print $3}'`
  if [ -n "$EXTRA" ]; then
    echo Unexpected package%tag: $PKGTAG
    exit 1
  fi
  PKGPREFIX=`echo $PKG | awk -F/ '{print $1}'`
  PKGBASE=`basename $PKG`
  if test -r $PKGBASE; then
    echo Package $PKG is already checked out
  else
    echo Checking out $PKG $TAG
    TAGSUF=
    if [ -n "$TAG" ]; then
      TAGSUF="-t $TAG"
    fi
    COM="mrb gitCheckout $TAGSUF $PKG"
    #if ! mrb gitCheckout $TAGSUF $PKG; then
    if ! $COM; then
      echo Checkout failed for $TAGSUF $PKG
      if echo $PKG | grep ^ssh: >/dev/null 2>&1; then 
        echo Test ssh access with
        echo "   ssh -T git@github.com"
        echo If that fails, add your key to the ssh agent:
        echo "  ssh-add ~/.ssh/github_rsa"
        echo "If that fails, start ssh agent with:"
        echo "  eval \"$(ssh-agent -s)\""
      fi
      exit 1
    else
      echo $COM >> $DUNE_HISTORY
    fi
    STAT=$?
    echo Create local feature branch
    echo $DUNE_LINE
    cd $PKGBASE
    #tmp git flow feature start $GIT_BRANCH_NAME
    cd ..
  fi
done
echo $DUNE_LINE

# Fix the versions in local products to correspond to check outs.
# See https://cdcvs.fnal.gov/redmine/projects/lbnecode/wiki/_Tutorial_#When-a-new-LArSoft-release-is-available-and-you-want-to-develop-against-the-new-LArSoft-release.
if [ -n "$MRB_TOP" ]; then
  cd $MRB_TOP
  if [ -r $LPRODDIR ]; then
    if [ -n "$DUNE_VERBOSE" ]; then echo Removing $LPRODDIR; fi
    rm -rf $LPRODDIR
  fi
  if [ -n "$DUNE_VERBOSE" ]; then echo Running mrb newDev; fi
  mrb newDev -p
else
  echo MRB_TOP is not defined
  exit 1
fi

echo $DUNE_LINE
exit 5

echo $DUNE_LINE
echo Set up to run
if [ -n "$DUNE_VERBOSE" ]; then echo Running mrbslp; fi
mrbslp
cd $THISDIR

echo
echo Generate an event: lar -n 10 -c prodsingle_lbne35t.fcl
echo Event display: lar -c evd_lbne35t.fcl single35t_gen.root
echo $DUNE_LINE
